/* EX 01

(B√¥nus) Fa√ßa um programa que receba uma string em algarismos romanos e retorne o n√∫mero que a string representa.

Aten√ß√£o! Esse exerc√≠cio j√° apareceu no processo seletivo de uma grande multinacional!

Dicas:

    Uma string √© um array de caracteres, ent√£o cada elemento do array √© uma letra.
    O valor de cada numeral romano √©:

| I   | 1    |

| --- | ---- |

| IV  | 4    |

| V   | 5    |

| IX  | 9    |

| X   | 10   |

| XL  | 40   |

| L   | 50   |

| XC  | 90   |

| C   | 100  |

| CD  | 400  |

| D   | 500  |

| CM  | 900  |

| M   | 1000 |

    Que tal criar um objeto que associe cada letra a um numeral para f√°cil consulta?

    Aten√ß√£o! Quando voc√™ tem um n√∫mero pequeno √† direita de um n√∫mero grande, eles devem ser somados. Exemplo: XI = 10 + 1 = 11. No entanto, se o n√∫mero pequeno est√° √† esquerda de um n√∫mero maior que ele, ele deve ser subtra√≠do. Exemplo: IX = 10 - 1 = 9.
*/

/* EX 02

    Crie uma fun√ß√£o chamada arrayOfNumbers que receber√° a vari√°vel vector como par√¢metro.

    Atrav√©s de um loop for, percorra essa vari√°vel, busque os n√∫meros pares e os adicione a um novo array, que dever√° ser retornado ao final pela fun√ß√£o.

let vector = [[1, 2], [3,4,5,6], [7,8,9,10]];

üöÄ Exerc√≠cio 3

A partir do array de frutas basket, retorne um objeto que contenha o nome da fruta como chave e a quantidade de vezes que ela aparece no array como valor. Por exemplo, o array [‚ÄòMelancia‚Äô, ‚ÄòAbacate‚Äô, ‚ÄòMelancia‚Äô, ‚ÄòMelancia‚Äô, ‚ÄòUva‚Äô], dever√° retornar { Melancia: 3, Abacate: 1, Uva: 1 } quando passado como argumento para a fun√ß√£o.

Em seguida, imprima esse resultado na tela com uma mensagem no seguinte formato: Sua cesta possui: x Melancias, x Abacates...

const basket = [

  'Melancia', 'Abacate', 'Melancia', 'Melancia', 'Uva', 'Laranja',

  'Jaca', 'Pera', 'Melancia', 'Uva', 'Laranja', 'Melancia',

  'Banana', 'Uva', 'Pera', 'Abacate', 'Laranja', 'Abacate',

  'Banana', 'Melancia', 'Laranja', 'Laranja', 'Jaca', 'Uva',

  'Banana', 'Uva', 'Laranja', 'Pera', 'Melancia', 'Uva',

  'Jaca', 'Banana', 'Pera', 'Abacate', 'Melancia', 'Melancia',

  'Laranja', 'Pera', 'Banana', 'Jaca', 'Laranja', 'Melancia',

  'Abacate', 'Abacate', 'Pera', 'Melancia', 'Banana', 'Banana',

  'Abacate', 'Uva', 'Laranja', 'Banana', 'Abacate', 'Uva',

  'Uva', 'Abacate', 'Abacate', 'Melancia', 'Uva', 'Jaca',

  'Uva', 'Banana', 'Abacate', 'Banana', 'Uva', 'Banana',

  'Laranja', 'Laranja', 'Jaca', 'Jaca', 'Abacate', 'Jaca',

  'Laranja', 'Melancia', 'Pera', 'Jaca', 'Melancia', 'Uva',

  'Abacate', 'Jaca', 'Jaca', 'Abacate', 'Uva', 'Laranja',

  'Pera', 'Melancia', 'Jaca', 'Pera', 'Laranja', 'Jaca',

  'Pera', 'Melancia', 'Jaca', 'Banana', 'Laranja', 'Jaca',

  'Banana', 'Pera', 'Abacate', 'Uva',

];

Exerc√≠cio 4

Usando o objeto abaixo, fa√ßa o que for pedido a seguir:

let moradores = {

  blocoUm: [

    {

      nome: 'Luiza',

      sobrenome: 'Guimar√£es',

      andar: 10,

      apartamento: 1005,

    },

    {

      nome: 'William',

      sobrenome: 'Albuquerque',

      andar: 5,

      apartamento: 502,

    },

  ],

  blocoDois: [

    {

      nome: 'Murilo',

      sobrenome: 'Ferraz',

      andar: 8,

      apartamento: 804,

    },

    {

      nome: 'Zoey',

      sobrenome: 'Brooks',

      andar: 1,

      apartamento: 101,

    },

  ],

};

    Acesse as chaves nome, sobrenome, andar e apartamento do √∫ltimo morador do blocoDois e fa√ßa um console.log no seguinte formato: ‚ÄúO morador do bloco 2 de nome Zoey Brooks mora no 1¬∞ andar, apartamento 101‚Äù.

    Utilize o for para imprimir o nome completo de todos os moradores do bloco 1, acessando suas chaves nome e sobrenome. Depois fa√ßa o mesmo para os moradores do bloco 2.

