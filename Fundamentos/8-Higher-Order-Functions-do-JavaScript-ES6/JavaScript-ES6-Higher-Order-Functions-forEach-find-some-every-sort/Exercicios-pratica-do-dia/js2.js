/* Parte II - Organizando uma biblioteca
üöÄ Se liga nesse foguete!

Os exerc√≠cios destacados com üöÄ s√£o os fundamentais pra voc√™ ir bem no projeto! Todos os exerc√≠cios v√£o contribuir com sua forma√ß√£o, mas fique de olho nesses! üëÄ

Instru√ß√µes para a realiza√ß√£o dos exerc√≠cios
Nos exerc√≠cios a seguir, voc√™ trabalhar√° com uma estrutura de dados representando uma lista de livros contendo informa√ß√µes como nome do livro, g√™nero, pessoa autora do livro e data de lan√ßamento.

Em cada exerc√≠cio, ser√° pedido que voc√™ encontre ou produza alguma informa√ß√£o a respeito dessa lista utilizando as fun√ß√µes que voc√™ aprendeu hoje. Todos os exerc√≠cios cont√™m um c√≥digo-base. Voc√™ dever√° copiar esse c√≥digo e salv√°-lo em um arquivo nomeado conforme o n√∫mero do exerc√≠cio, completando a fun√ß√£o vazia.

Por exemplo, o exerc√≠cio 1 deve ser salvo no arquivo exercise1.js, e assim por diante.

üöÄ Organizando uma biblioteca
Estes exerc√≠cios praticam os conceitos de Higher Order Functions associados a outros temas de fundamentos j√° vistos, como arrow functions, template literals e objetos. Essa mistura de conceitos √© muito importante para o seu aprendizado, ent√£o use tudo o que sabe para resolver os exerc√≠cios!

Utilize o seguinte c√≥digo como template para realizar os exerc√≠cios:

Copiar
const books = [
  {
    id: 1,
    name: 'As Cr√¥nicas de Gelo e Fogo',
    genre: 'Fantasia',
    author: {
      name: 'George R. R. Martin',
      birthYear: 1948,
    },
    releaseYear: 1991,
  },
  {
    id: 2,
    name: 'O Senhor dos An√©is',
    genre: 'Fantasia',
    author: {
      name: 'J. R. R. Tolkien',
      birthYear: 1892,
    },
    releaseYear: 1954,
  },
  {
    id: 3,
    name: 'Funda√ß√£o',
    genre: 'Fic√ß√£o Cient√≠fica',
    author: {
      name: 'Isaac Asimov',
      birthYear: 1920,
    },
    releaseYear: 1951,
  },
  {
    id: 4,
    name: 'Duna',
    genre: 'Fic√ß√£o Cient√≠fica',
    author: {
      name: 'Frank Herbert',
      birthYear: 1920,
    },
    releaseYear: 1965,
  },
  {
    id: 5,
    name: 'A Coisa',
    genre: 'Terror',
    author: {
      name: 'Stephen King',
      birthYear: 1947,
    },
    releaseYear: 1986,
  },
  {
    id: 6,
    name: 'O Chamado de Cthulhu',
    genre: 'Terror',
    author: {
      name: 'H. P. Lovecraft',
      birthYear: 1890,
    },
    releaseYear: 1928,
  },
];

// Adicione o c√≥digo do exerc√≠cio aqui:
Encontre o nome da primeira pessoa autora do livro nascida no ano de 1947.
De olho na dica üëÄ: use a fun√ß√£o find.

Copiar
const expectedResult = 'Stephen King';
const authorBornIn1947 = () => {
  // escreva aqui o seu c√≥digo
}
Retorne o nome do livro com menor n√∫mero de caracteres (menor nome).
De olho na dica üëÄ: use a fun√ß√£o forEach.

Copiar
const expectedResult = 'Duna';
const smallerName = () => {
  let nameBook;
  // escreva aqui o seu c√≥digo

  // Vari√°vel nameBook que receber√° o valor do menor nome;
  return nameBook;
}
Encontre o primeiro livro cujo nome possua 26 caracteres.
Copiar
const expectedResult = {
  author: {
    birthYear: 1948,
    name: 'George R. R. Martin',
  },
  genre: 'Fantasia',
  id: 1,
  name: 'As Cr√¥nicas de Gelo e Fogo',
  releaseYear: 1991,
};

const getNamedBook = () => {
  // escreva seu c√≥digo aqui
}
Fa√ßa uma fun√ß√£o que retorne true se todas as pessoas autoras tiverem nascido no s√©culo XX, ou false, caso contr√°rio.
Copiar
const expectedResult = false;

function everyoneWasBornOnSecXX() {
  // escreva seu c√≥digo aqui
}
Fa√ßa uma fun√ß√£o que retorne true, se algum livro foi lan√ßado na d√©cada de 80, e false, caso contr√°rio.
Copiar
const expectedResult = true;

const someBookWasReleaseOnThe80s = () => {
  // escreva seu c√≥digo aqui
}
Fa√ßa uma fun√ß√£o que retorne true, caso nenhuma pessoa autora tenha nascido no mesmo ano, e false, caso contr√°rio.
Copiar
const expectedResult = false;

function authorUnique() {
  // escreva seu c√≥digo aqui
}


*/ 